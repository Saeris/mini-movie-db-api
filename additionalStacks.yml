plugins:
  - serverless-sentry
  - serverless-plugin-additional-stacks
  - serverless-s3-local
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-scripts

additionalStacks:
  cache:
    StackName: redis-cache
    Resources:
      ElasticacheSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Ingress for Redis Cluster
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '6379'
              ToPort: '6379'
              CidrIp: 0.0.0.0/0
      ElasticacheCluster:
        Type: AWS::ElastiCache::CacheCluster
        Properties:
          AutoMinorVersionUpgrade: true
          Engine: redis
          CacheNodeType: cache.t1.micro
          NumCacheNodes: 1
          VpcSecurityGroupIds:
            - Fn::GetAtt:
              - ElasticacheSecurityGroup
              - GroupId
    Outputs:
      RedisHost:
        Description: Host of newly created ElastiCache
        Value:
          "Fn::GetAtt": [ElasticacheCluster, RedisEndpoint.Address]
        Export:
          Name: RedisHost
      RedisPort:
        Description: Port of newly created ElastiCache
        Value:
          "Fn::GetAtt": [ElasticacheCluster, RedisEndpoint.Port]
        Export:
          Name: RedisPort
  storage:
    StackName: image-storage
    Resources:
      S3BucketData:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:provider.environment.S3_BUCKET}
    Outputs:
      BucketURL:
        Description: URL of the S3 Bucket
        Value:
          "Fn::GetAtt": [S3BucketData, WebsiteURL]
        Export:
          Name: ImageStorageURL
s3:
  host: ${self:provider.environment.S3_HOST}
  port: ${self:provider.environment.S3_PORT}
  directory: ./public
